/* The following code was generated by JFlex 1.6.1 */

import java.io.Reader
import scala.util.control.Breaks._

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Sample.flex</tt>
 */
class Yylex(in: Reader)  {

  /** This character denotes the end of file */
  final val YYEOF = -1

  /** initial size of the lookahead buffer */
  final val ZZ_BUFFERSIZE = 16384

  /** lexical states */
  final val YYINITIAL = 0

  /**
   * ZZ_LEXSTATE(l) is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE(l+1) is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  final val ZZ_LEXSTATE = Array[Int]( 
     0, 0
  )

  /** 
   * Translates characters to character classes
   */
  final val ZZ_CMAP_PACKED: String = 
    "\u0009\u0000\u0002\u0008\u0015\u0000\u0001\u0008\u000d\u0000\u0001\u0007\u0001\u0000\u0001\u0001\u0009\u0002\u0026\u0000\u0001\u0006\u0005\u0005\u0001\u0004\u0002\u0005\u0001\u0003\u0011\u0005\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uff95\u0000"

  /** 
   * Translates characters to character classes
   */
  final val ZZ_CMAP: Array[Char] = zzUnpackCMap(ZZ_CMAP_PACKED)

  /** 
   * Translates DFA states to action switch labels.
   */

  private final val ZZ_ACTION_PACKED_0: String =
    "\u0001\u0000\u0002\u0001\u0002\u0002\u0002\u0000\u0001\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0000\u0001\u0005\u0001\u0000\u0001\u0007";

  def zzUnpackAction(): Array[Int] = {
    val result = new Array[Int](15)
    var offset = 0
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result)
    result
  }

  def zzUnpackAction(packed: String, offset: Int, result: Array[Int]): Int = {
    var i = 0       /* index in packed string  */
    var j = offset  /* index in unpacked array */
    val l = packed.length()
    while (i < l) {
      var count = packed.charAt(i).toInt; i += 1
      val value = packed.charAt(i); i += 1
      result(j) = value; j+=1
      count -= 1
      while (count > 0){
        result(j) = value; j+=1
        count -= 1
      }
    }
    j
  }
  private final val ZZ_ACTION: Array[Int] = zzUnpackAction()


  /** 
   * Translates a state to a row index in the transition table
   */

  private final val ZZ_ROWMAP_PACKED_0: String =
    "\u0000\u0000\u0000\u0009\u0000\u0012\u0000\u001b\u0000\u0024\u0000\u002d\u0000\u0036\u0000\u003f\u0000\u0048\u0000\u0051\u0000\u0024\u0000\u005a\u0000\u0063\u0000\u006c\u0000\u0063"

  def zzUnpackRowMap(): Array[Int] = {
    val result = new Array[Int](15)
    var offset = 0
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result)
    result
  }

  def zzUnpackRowMap(packed: String, offset: Int, result: Array[Int]): Int = {
    var i = 0  /* index in packed string  */
    var j = offset  /* index in unpacked array */
    val l = packed.length()
    while (i < l) {
      val high = packed.charAt(i) << 16; i += 1
      result(j) = high | packed.charAt(i); j += 1; i += 1
    }
    j
  }
  private final val ZZ_ROWMAP: Array[Int] = zzUnpackRowMap()

  /** 
   * The transition table of the DFA
   */

  private final val ZZ_TRANS_PACKED_0: String =
    "\u0001\u0000\u0001\u0002\u0001\u0003\u0001\u0004\u0002\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0000\u0002\u0009\u0004\u0000\u0001\u000a\u0002\u0000\u0002\u0003\u0004\u0000\u0001\u000a\u0002\u0000\u0003\u0005\u0001\u000b\u0001\u0005\u0004\u0000\u0005\u0005\u0006\u0000\u0001\u000c\u0006\u0000\u0001\u000d\u0001\u000a\u000e\u0000\u0001\u0008\u0001\u0000\u0002\u0009\u0004\u0000\u0001\u0007\u0002\u0000\u0002\u000a\u000a\u0000\u0001\u000e\u0013\u0000\u0001\u000f\u0002\u0000";

  def zzUnpackTrans(): Array[Int] = {
    val result = new Array[Int](117)
    var offset = 0
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result)
    result
  }

  def zzUnpackTrans(packed: String, offset: Int, result: Array[Int]): Int = {
    var i = 0       /* index in packed string  */
    var j = offset  /* index in unpacked array */
    val l = packed.length()
    while (i < l) {
      var count = packed.charAt(i).toInt; i += 1
      var value = packed.charAt(i).toInt; i += 1
      value -= 1
      result(j) = value; j+=1
      count -= 1
      while (count > 0){
        result(j) = value; j+=1
        count -= 1
      }
    }
    j
  }
  private final val ZZ_TRANS: Array[Int] = zzUnpackTrans()


  /* error codes */
  private final val ZZ_UNKNOWN_ERROR = 0
  private final val ZZ_NO_MATCH = 1
  private final val ZZ_PUSHBACK_2BIG = 2

  /* error messages for the codes above */
  private final val ZZ_ERROR_MSG = Array[String](
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  )

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */

  private final val ZZ_ATTRIBUTE_PACKED_0: String =
    "\u0001\u0000\u0004\u0001\u0002\u0000\u0004\u0001\u0001\u0000\u0001\u0009\u0001\u0000\u0001\u0009";

  def zzUnpackAttribute(): Array[Int] = {
    val result = new Array[Int](15)
    var offset = 0
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result)
    result
  }

  def zzUnpackAttribute(packed: String, offset: Int, result: Array[Int]): Int = {
    var i = 0       /* index in packed string  */
    var j = offset  /* index in unpacked array */
    val l = packed.length()
    while (i < l) {
      var count = packed.charAt(i).toInt; i += 1
      val value = packed.charAt(i); i += 1
      result(j) = value; j+=1
      count -= 1
      while (count > 0){
        result(j) = value; j+=1
        count -= 1
      }
    }
    j
  }
  private final val ZZ_ATTRIBUTE: Array[Int] = zzUnpackAttribute()

  /** the input device */
  var zzReader = in

  /** the current state of the DFA */
  var zzState = 0

  /** the current lexical state */
  var zzLexicalState = YYINITIAL

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  var zzBuffer = new Array[Char](ZZ_BUFFERSIZE)

  /** the textposition at the last accepting state */
  var zzMarkedPos = 0

  /** the current text position in the buffer */
  var zzCurrentPos = 0

  /** startRead marks the beginning of the yytext() string in the buffer */
  var zzStartRead = 0

  /** endRead marks the last character in the buffer, that has been read
      from input */
  var zzEndRead = 0

  /** number of newlines encountered up to the start of the matched text */
  var yyline = 0

  /** the number of characters up to the start of the matched text */
  var yychar = 0

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  var yycolumn = 0

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  var zzAtBOL = true

  /** zzAtEOF == true <=> the scanner is at the EOF */
  var zzAtEOF = false

  /** denotes if the user-EOF-code has already been executed */
  var zzEOFDone = false
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  var zzFinalHighSurrogate = 0



  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  def zzUnpackCMap(packed: String): Array[Char] = {
    val map = new Array[Char](0x110000)
    var i = 0  /* index in packed string  */
    var j = 0  /* index in unpacked array */
    while (i < 66) {
      var count = packed.charAt(i).toInt; i += 1
      val value = packed.charAt(i); i += 1
      map(j) = value; j += 1; count -= 1
      while(count > 0){
        map(j) = value; j += 1; count -= 1
      }
    }
    map
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   */
  @throws[java.io.IOException]("if any I/O-Error occurs")
  def zzRefill(): Boolean = {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate
      zzFinalHighSurrogate = 0
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead)

      /* translate stored positions */
      zzEndRead-= zzStartRead
      zzCurrentPos-= zzStartRead
      zzMarkedPos-= zzStartRead
      zzStartRead = 0
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      val newBuffer = new Array[Char](zzBuffer.length*2)
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length)
      zzBuffer = newBuffer
      zzEndRead += zzFinalHighSurrogate
      zzFinalHighSurrogate = 0
    }

    /* fill the buffer with new input */
    val requested = zzBuffer.length - zzEndRead
    var numRead = zzReader.read(zzBuffer, zzEndRead, requested)

    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      numRead = zzReader.read(zzBuffer, zzEndRead, requested)
    }
    if (numRead > 0) {
      zzEndRead += numRead
      if (numRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer(zzEndRead - 1))) {
          zzEndRead -= 1
          zzFinalHighSurrogate = 1
        }
      }
      return false
    }

    true
  }

    
  /**
   * Closes the input stream.
   */
  @throws[java.io.IOException]
  def yyclose(): Unit = {
    zzAtEOF = true            /* indicate end of file */
    zzEndRead = zzStartRead  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close()
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  def yyreset(reader: java.io.Reader): Unit = {
    zzReader = reader
    zzAtBOL  = true
    zzAtEOF  = false
    zzEOFDone = false
    zzEndRead = 0
    zzStartRead = 0
    zzCurrentPos = 0
    zzMarkedPos = 0
    zzFinalHighSurrogate = 0
    yyline = 0
    yychar = 0
    yycolumn = 0
    zzLexicalState = YYINITIAL
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new Array[Char](ZZ_BUFFERSIZE)
  }


  /**
   * Returns the current lexical state.
   */
  def yystate(): Int = zzLexicalState


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  def yybegin(newState: Int): Unit = {
    zzLexicalState = newState
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  def yytext(): String = new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead)


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  def yycharat(pos: Int): Char = zzBuffer(zzStartRead+pos)


  /**
   * Returns the length of the matched text region.
   */
  def yylength(): Int = zzMarkedPos-zzStartRead


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  def zzScanError(errorCode: Int): Unit = {
    var message = ""
    try {
      message = ZZ_ERROR_MSG(errorCode)
    }
    catch {
      case e: ArrayIndexOutOfBoundsException => message = ZZ_ERROR_MSG(ZZ_UNKNOWN_ERROR)
    }

    throw new Error(message)
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
 def yypushback(number: Int): Unit = {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG)

    zzMarkedPos -= number
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   */
 @throws[java.io.IOException]("if any I/O-Error occurs")
 def yylex(): Tokens.Token = {
    var zzInput = -1
    var zzAction = -1

    // cached fields:
    var zzCurrentPosL = -1
    var zzMarkedPosL = -1
    var zzEndReadL = zzEndRead
    var zzBufferL = zzBuffer
    val zzCMapL = ZZ_CMAP

    val zzTransL: Array[Int] = ZZ_TRANS
    val zzRowMapL: Array[Int] = ZZ_ROWMAP
    val zzAttrL: Array[Int] = ZZ_ATTRIBUTE

    var ret: Tokens.Token = null

    while ((ret == null) && !zzAtEOF) {
      zzMarkedPosL = zzMarkedPos

      zzAction = -1

      zzCurrentPosL = zzMarkedPosL
      zzCurrentPos = zzMarkedPosL
      zzStartRead = zzMarkedPosL
  
      zzState = ZZ_LEXSTATE(zzLexicalState)

      // set up zzAction for empty match case:
      var zzAttributes = zzAttrL(zzState)
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState
      }


      breakable {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL)
            zzCurrentPosL += Character.charCount(zzInput)
          }
          else if (zzAtEOF) {
            zzInput = YYEOF
            break
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL
            zzMarkedPos   = zzMarkedPosL
            val eof = zzRefill()
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos
            zzMarkedPosL   = zzMarkedPos
            zzBufferL      = zzBuffer
            zzEndReadL     = zzEndRead
            if (eof) {
              zzInput = YYEOF
              break
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL)
              zzCurrentPosL += Character.charCount(zzInput)
            }
          }
          val zzNext = zzTransL(zzRowMapL(zzState) + zzCMapL(zzInput))
          if (zzNext == -1) break
          zzState = zzNext

          zzAttributes = zzAttrL(zzState)
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState
            zzMarkedPosL = zzCurrentPosL
            if ( (zzAttributes & 8) == 8 ) break
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL

      ret = if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true
        Tokens.EOF
      }
      else {
        (if (zzAction < 0) zzAction else ZZ_ACTION(zzAction)) match {
          case 1 => 
             Tokens.NUM(yytext().toInt)
          case 8 => null // noop
          case 2 => 
             Tokens.ID(yytext())
          case 9 => null // noop
          case 3 => 
             yylex()
          case 10 => null // noop
          case 4 => 
             Base.error()
          case 11 => null // noop
          case 5 => 
             Tokens.REAL(yytext().toDouble)
          case 12 => null // noop
          case 6 => 
             Tokens.IF
          case 13 => null // noop
          case 7 => 
             Tokens.ID("if")
          case 14 => null // noop
          case _ =>
            zzScanError(ZZ_NO_MATCH); null
        }
      }
    }
    ret
  }


}
