compile
test
compile
test
compile
test
compile
test
compile
test
test Lexer
:help
help
test
compile
IF
console
compile
console
compile
test
compile
test
console
compile
console
compile
console
compile
console
compile
console
compile
console
compile
clean
compile
help
reload
compile
test
compile
test
compile
console
test
compile
test
compile
test
console
test
compile
test
compile
reload
compile
clean
compile
clean
compile
clean
compile
clean
reload
clean
compile
clean
compile
test
compile
test
compile
test
compile
test
compiel
compile
console
compile
console
compile
console
compile
val d = p.D()
console
compile
console
compile
sbt reload
reload
plugins
compile
:type Yylex
console
compile
console
compile
console
:past
console
compile
console
compile
ls
console
compile
console
compile
console
compile
test
console
compile
console
consle
console
val Nil = 0
console
compile
console
compile
console
compile
console
compile
console
compile
console
compile
clean
compile
MyTest.genCode("def f(i:Int):Int = if (i=0) Nil else i::f(i-1)")
console
compile
console
compile
val h = new Heap(10)
console
compile
console
compile
clean
compile
console
compile
(x => x)
console
compile
console
compile
console
compile
console
compile
console
compile
console
clean
compile
Asm.test("def f(n:Int):Int = if (n==0) 0 else n+f(n+1)")
console
Asm.test("def f(n:Int):Int = if (n==0) 0 else n+f(n+1)")
console
compile
console
compile
parseStr("x")
console
compile
console
compile
clean
compile
console
Main.parseStr("x+x")
console
compile
console
clean
compile
console
compile
console
compile
console
scala
console
val file = new Java.io.File("/tmp/abc.txt")
console
compile
console
compile
test
console
test
console
MultiMap(1->2)
console
test
console
test
console
test
console
clean
console
test
compile
test
console
test
console
test
console
clean
console
compile
test
console
test
compile
test
compile
clean
compile
console
:q
exit
console
compile
:q
quit
